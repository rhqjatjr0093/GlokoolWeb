[{"C:\\Work\\GlokoolWeb\\src\\index.js":"1","C:\\Work\\GlokoolWeb\\src\\Root.js":"2","C:\\Work\\GlokoolWeb\\src\\reportWebVitals.js":"3","C:\\Work\\GlokoolWeb\\src\\redux\\configureStore.js":"4","C:\\Work\\GlokoolWeb\\src\\App.js":"5","C:\\Work\\GlokoolWeb\\src\\Firebase.js":"6","C:\\Work\\GlokoolWeb\\src\\redux\\modules\\index.js":"7","C:\\Work\\GlokoolWeb\\src\\pages\\index.js":"8","C:\\Work\\GlokoolWeb\\src\\redux\\modules\\base.js":"9","C:\\Work\\GlokoolWeb\\src\\redux\\modules\\Auth.js":"10","C:\\Work\\GlokoolWeb\\src\\redux\\modules\\Main.js":"11","C:\\Work\\GlokoolWeb\\src\\pages\\Auth.js":"12","C:\\Work\\GlokoolWeb\\src\\pages\\Email.js":"13","C:\\Work\\GlokoolWeb\\src\\pages\\Main.js":"14","C:\\Work\\GlokoolWeb\\src\\components\\Base\\LoginHeaderContainer.js":"15","C:\\Work\\GlokoolWeb\\src\\containers\\Main\\Setting.js":"16","C:\\Work\\GlokoolWeb\\src\\containers\\Main\\Chat.js":"17","C:\\Work\\GlokoolWeb\\src\\containers\\Auth\\index.js":"18","C:\\Work\\GlokoolWeb\\src\\components\\Auth\\index.js":"19","C:\\Work\\GlokoolWeb\\src\\containers\\Email\\index.js":"20","C:\\Work\\GlokoolWeb\\src\\components\\Chat\\index.js":"21","C:\\Work\\GlokoolWeb\\src\\containers\\Email\\EmailFail.js":"22","C:\\Work\\GlokoolWeb\\src\\containers\\Email\\EmailVefication.js":"23","C:\\Work\\GlokoolWeb\\src\\components\\Auth\\AuthError.js":"24","C:\\Work\\GlokoolWeb\\src\\components\\Auth\\AuthText.js":"25","C:\\Work\\GlokoolWeb\\src\\components\\Chat\\ChatRoom.js":"26","C:\\Work\\GlokoolWeb\\src\\components\\Auth\\AuthGender.js":"27","C:\\Work\\GlokoolWeb\\src\\components\\Auth\\AuthDate.js":"28","C:\\Work\\GlokoolWeb\\src\\components\\Base\\Header\\index.js":"29","C:\\Work\\GlokoolWeb\\src\\components\\Auth\\AuthButton.js":"30","C:\\Work\\GlokoolWeb\\src\\components\\Setting\\index.js":"31","C:\\Work\\GlokoolWeb\\src\\components\\Auth\\AuthContent.js":"32","C:\\Work\\GlokoolWeb\\src\\components\\Auth\\InputWithLabel.js":"33","C:\\Work\\GlokoolWeb\\src\\containers\\Auth\\Email.js":"34","C:\\Work\\GlokoolWeb\\src\\containers\\Auth\\Login.js":"35","C:\\Work\\GlokoolWeb\\src\\components\\Auth\\AuthWrapper.js":"36","C:\\Work\\GlokoolWeb\\src\\containers\\Auth\\Register.js":"37","C:\\Work\\GlokoolWeb\\src\\lib\\styleUtil.js":"38","C:\\Work\\GlokoolWeb\\src\\components\\Base\\Header\\SettingButton.js":"39","C:\\Work\\GlokoolWeb\\src\\components\\Base\\Header\\SignUpButton.js":"40","C:\\Work\\GlokoolWeb\\src\\components\\Base\\Header\\LogoutButton.js":"41","C:\\Work\\GlokoolWeb\\src\\components\\Setting\\SettingText.js":"42","C:\\Work\\GlokoolWeb\\src\\components\\Setting\\SettingButton.js":"43","C:\\Work\\GlokoolWeb\\src\\components\\Setting\\SettingGender.js":"44","C:\\Work\\GlokoolWeb\\src\\components\\Setting\\SettingDate.js":"45","C:\\Work\\GlokoolWeb\\src\\components\\Setting\\SettingError.js":"46","C:\\Work\\GlokoolWeb\\src\\components\\Setting\\InputWithLabel.js":"47","C:\\Work\\GlokoolWeb\\src\\components\\Setting\\SettingContent.js":"48","C:\\Work\\GlokoolWeb\\src\\components\\Setting\\SettingWrapper.js":"49","C:\\Work\\GlokoolWeb\\src\\components\\Base\\Header\\LoginButton.js":"50","C:\\Work\\GlokoolWeb\\src\\components\\Base\\Header\\Header.js":"51","C:\\Work\\GlokoolWeb\\src\\pages\\Home.js":"52","C:\\Work\\GlokoolWeb\\src\\components\\Base\\HeaderContainer.js":"53"},{"size":347,"mtime":1613375932755,"results":"54","hashOfConfig":"55"},{"size":397,"mtime":1613375932731,"results":"56","hashOfConfig":"55"},{"size":375,"mtime":1613375932762,"results":"57","hashOfConfig":"55"},{"size":649,"mtime":1613375932759,"results":"58","hashOfConfig":"55"},{"size":2194,"mtime":1613375932730,"results":"59","hashOfConfig":"55"},{"size":923,"mtime":1613375932730,"results":"60","hashOfConfig":"55"},{"size":272,"mtime":1613375932761,"results":"61","hashOfConfig":"55"},{"size":170,"mtime":1613375932758,"results":"62","hashOfConfig":"55"},{"size":842,"mtime":1613375932761,"results":"63","hashOfConfig":"55"},{"size":1409,"mtime":1613375932759,"results":"64","hashOfConfig":"55"},{"size":1264,"mtime":1613375932760,"results":"65","hashOfConfig":"55"},{"size":1147,"mtime":1613375932756,"results":"66","hashOfConfig":"55"},{"size":1105,"mtime":1613375932757,"results":"67","hashOfConfig":"55"},{"size":938,"mtime":1613451514932,"results":"68","hashOfConfig":"55"},{"size":546,"mtime":1613375932743,"results":"69","hashOfConfig":"55"},{"size":4780,"mtime":1613454290322,"results":"70","hashOfConfig":"55"},{"size":13678,"mtime":1613451514930,"results":"71","hashOfConfig":"55"},{"size":139,"mtime":1613375932751,"results":"72","hashOfConfig":"55"},{"size":440,"mtime":1613375932739,"results":"73","hashOfConfig":"55"},{"size":116,"mtime":1613375932753,"results":"74","hashOfConfig":"55"},{"size":55,"mtime":1613375932743,"results":"75","hashOfConfig":"55"},{"size":1249,"mtime":1613375932751,"results":"76","hashOfConfig":"55"},{"size":2270,"mtime":1613375932752,"results":"77","hashOfConfig":"55"},{"size":482,"mtime":1613375932736,"results":"78","hashOfConfig":"55"},{"size":607,"mtime":1613375932737,"results":"79","hashOfConfig":"55"},{"size":1885,"mtime":1613375932743,"results":"80","hashOfConfig":"55"},{"size":946,"mtime":1613375932737,"results":"81","hashOfConfig":"55"},{"size":1143,"mtime":1613375932736,"results":"82","hashOfConfig":"55"},{"size":271,"mtime":1613375932742,"results":"83","hashOfConfig":"55"},{"size":726,"mtime":1613375932735,"results":"84","hashOfConfig":"55"},{"size":482,"mtime":1613375932749,"results":"85","hashOfConfig":"55"},{"size":349,"mtime":1613375932735,"results":"86","hashOfConfig":"55"},{"size":895,"mtime":1613375932738,"results":"87","hashOfConfig":"55"},{"size":2195,"mtime":1613375932749,"results":"88","hashOfConfig":"55"},{"size":3842,"mtime":1613375932750,"results":"89","hashOfConfig":"55"},{"size":1206,"mtime":1613375932738,"results":"90","hashOfConfig":"55"},{"size":7167,"mtime":1613451514929,"results":"91","hashOfConfig":"55"},{"size":1322,"mtime":1613375932755,"results":"92","hashOfConfig":"55"},{"size":881,"mtime":1613375932741,"results":"93","hashOfConfig":"55"},{"size":839,"mtime":1613375932742,"results":"94","hashOfConfig":"55"},{"size":951,"mtime":1613375932741,"results":"95","hashOfConfig":"55"},{"size":613,"mtime":1613375932748,"results":"96","hashOfConfig":"55"},{"size":732,"mtime":1613375932746,"results":"97","hashOfConfig":"55"},{"size":952,"mtime":1613375932748,"results":"98","hashOfConfig":"55"},{"size":1149,"mtime":1613375932747,"results":"99","hashOfConfig":"55"},{"size":488,"mtime":1613375932747,"results":"100","hashOfConfig":"55"},{"size":895,"mtime":1613375932746,"results":"101","hashOfConfig":"55"},{"size":355,"mtime":1613375932747,"results":"102","hashOfConfig":"55"},{"size":1110,"mtime":1613451514928,"results":"103","hashOfConfig":"55"},{"size":817,"mtime":1613375932740,"results":"104","hashOfConfig":"55"},{"size":1569,"mtime":1613375932740,"results":"105","hashOfConfig":"55"},{"size":945,"mtime":1613451514933,"results":"106","hashOfConfig":"55"},{"size":605,"mtime":1613375932742,"results":"107","hashOfConfig":"55"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},"11x0r05",{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"110"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"110"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"143","messages":"144","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"110"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"110"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"110"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"110"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"110"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"110"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"110"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"110"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"110"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"110"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"110"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Work\\GlokoolWeb\\src\\index.js",[],["228","229"],"C:\\Work\\GlokoolWeb\\src\\Root.js",[],"C:\\Work\\GlokoolWeb\\src\\reportWebVitals.js",[],"C:\\Work\\GlokoolWeb\\src\\redux\\configureStore.js",[],"C:\\Work\\GlokoolWeb\\src\\App.js",[],"C:\\Work\\GlokoolWeb\\src\\Firebase.js",[],"C:\\Work\\GlokoolWeb\\src\\redux\\modules\\index.js",[],"C:\\Work\\GlokoolWeb\\src\\pages\\index.js",[],"C:\\Work\\GlokoolWeb\\src\\redux\\modules\\base.js",[],"C:\\Work\\GlokoolWeb\\src\\redux\\modules\\Auth.js",[],"C:\\Work\\GlokoolWeb\\src\\redux\\modules\\Main.js",["230","231"],"import { createAction, handleActions } from 'redux-actions';\r\nimport { Map } from 'immutable';\r\nimport { auth, firestore } from '../../Firebase';\r\n\r\nconst CHANGE_INPUT = 'main/CHANGE_INPUT'; // input 값 변경\r\nconst INITIALIZE_FORM = 'main/INITIALIZE_FORM'; // form 초기화\r\n\r\nexport const changeInput = createAction(CHANGE_INPUT); //  { form, name, value }\r\nexport const initializeForm = createAction(INITIALIZE_FORM); // form \r\n\r\nconst SET_ERROR = 'main/SET_ERROR'; // 오류 설정\r\n\r\nconst initialState = Map({\r\n    chatRoom: Map([]),\r\n    setting: Map({\r\n        name : '',\r\n        email : '',\r\n        gender : '',\r\n        signupDate : new Date(),  //가입한 날짜\r\n        birthDate : new Date()\r\n    })\r\n});\r\n\r\nexport default handleActions({\r\n    [CHANGE_INPUT]: (state, action) => {\r\n        const { form, name, value } = action.payload;\r\n        return state.setIn([form, 'form', name], value);\r\n    },\r\n    [INITIALIZE_FORM]: (state, action) => {\r\n        const initialForm = initialState.get(action.payload);\r\n        return state.set(action.payload, initialForm);\r\n    },\r\n    [SET_ERROR]: (state, action) => {\r\n        const { form, message } = action.payload;\r\n        return state.setIn([form, 'error'], message);\r\n    }\r\n}, initialState);","C:\\Work\\GlokoolWeb\\src\\pages\\Auth.js",[],"C:\\Work\\GlokoolWeb\\src\\pages\\Email.js",[],"C:\\Work\\GlokoolWeb\\src\\pages\\Main.js",["232","233"],"import React, { Component } from \"react\";\r\nimport { Route } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport * as baseActions from \"../redux/modules/base\";\r\nimport LoginHeaderContainer from \"../components/Base/LoginHeaderContainer\";\r\nimport Chat from \"../containers/Main/Chat\";\r\nimport Setting from \"../containers/Main/Setting\";\r\nimport { AuthWrapper } from \"../components/Auth\";\r\nimport { ChatRoomLeft } from \"../components/Chat\";\r\n\r\nclass Main extends Component {\r\n  render() {\r\n    return (\r\n      <div className={{ display: \"flex\" }}>\r\n        <LoginHeaderContainer />\r\n        <Route exact path=\"/main\" component={Chat} />\r\n        <Route exact path=\"/main/setting\" component={Setting} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  (state) => ({}),\r\n  (dispatch) => ({\r\n    BaseActions: bindActionCreators(baseActions, dispatch),\r\n  })\r\n)(Main);\r\n","C:\\Work\\GlokoolWeb\\src\\components\\Base\\LoginHeaderContainer.js",[],"C:\\Work\\GlokoolWeb\\src\\containers\\Main\\Setting.js",["234","235","236","237","238","239","240","241","242","243","244"],"C:\\Work\\GlokoolWeb\\src\\containers\\Main\\Chat.js",["245","246","247","248","249","250","251","252","253"],"import React, { useCallback, useRef } from 'react';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport { Avatar, ListItemAvatar, Toolbar } from '@material-ui/core';\r\nimport { GiftedChat, Composer, Bubble, Send } from 'react-native-gifted-chat';\r\nimport { database, auth, storage } from '../../Firebase'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faBars, faPaperPlane } from '@fortawesome/free-solid-svg-icons'\r\nimport { IconButton } from \"@material-ui/core\";\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport ImageUploader from 'react-images-upload';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport {Recorder} from 'react-voice-recorder'\r\nimport 'react-voice-recorder/dist/index.css'\r\n\r\n\r\nfunction rand() {\r\n  return Math.round(Math.random() * 20) - 10;\r\n}\r\n\r\nfunction getModalStyle() {\r\n  const top = 50 + rand();\r\n  const left = 50 + rand();\r\n\r\n  return {\r\n    top: `${top}%`,\r\n    left: `${left}%`,\r\n    transform: `translate(-${top}%, -${left}%)`,\r\n  };\r\n}\r\n\r\nconst Chat = () => {\r\n  const chatRoom = [1,2,3,4,5];\r\n  const classes = useStyles();\r\n  const [chatMessages, setChatMessages] = React.useState([]);  \r\n  const [selectedIndex, setSelectedIndex] = React.useState(1);\r\n\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const [modalOpen, setModalOpen] = React.useState(false);\r\n  const [modalStyle] = React.useState(getModalStyle);\r\n  const [audioModalOpen, setAudioModalOpen] = React.useState(false);\r\n  const [audioDetails, setAudioDetails] = React.useState(\r\n    {\r\n      url: null,\r\n      blob: null,\r\n      chunks: null,\r\n      duration: {\r\n        h: 0,\r\n        m: 0,\r\n        s: 0,\r\n      }\r\n    }\r\n  )\r\n\r\n  const ChatDB = database().ref('/chats/test');\r\n  const user = auth().currentUser;\r\n  const history = useHistory();\r\n\r\n\r\n  //메시지 아이디 생성기 (출처: https://github.com/liplylie/ReactNativeChatImageAudio/blob/master/src/components/chat.js)\r\n  //메시지 구분을 위한 임시 조치 (시간, uid를 넣어서 만들면 될 듯)\r\n  const messageIdGenerator = () => {\r\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, c => {\r\n        let r = (Math.random() * 16) | 0,\r\n            v = c == \"x\" ? r : (r & 0x3) | 0x8;\r\n        return v.toString(16);\r\n    });\r\n  }\r\n\r\n\r\n  //componentwillmount 대신 사용\r\n  //페이지 최초 로딩시 채팅 메시지 로딩\r\n  React.useEffect(() => {    \r\n    if(user.emailVerified == false){\r\n      history.push('/email/fail')\r\n    }\r\n\r\n    ChatDB.on('value', snapshot => {\r\n        if (!snapshot.val()) {\r\n            return;\r\n        }\r\n        let { messages } = snapshot.val();\r\n        messages = messages.map(node => {\r\n            const message = {};\r\n            message._id = node._id;\r\n            message.text = node.messageType === \"message\" ? node.text : \"\";\r\n            message.createdAt = node.createdAt;\r\n            message.user = {\r\n                _id: node.user._id,\r\n                // 바꿔야 됌\r\n            };\r\n            message.image = node.messageType === \"image\" ? node.image : \"\";\r\n            message.audio = node.messageType === \"audio\" ? node.audio : \"\";\r\n            message.messageType = node.messageType;\r\n            return message;\r\n        });\r\n        setChatMessages([...messages])\r\n    });;\r\n    \r\n    \r\n    return () => {\r\n        setChatMessages([]);\r\n    };\r\n  }, [])\r\n\r\n\r\n  // 이미지 업로드 기능 관련 구현\r\n  const clickImageSend = () => {\r\n    setModalOpen(true)\r\n    handleMenuClose();\r\n  };\r\n\r\n  const handleCloseImage = () => {\r\n    setModalOpen(false);\r\n  }\r\n\r\n  const onDrop = (pic, url) => {\r\n\r\n    const MessageID = messageIdGenerator();    \r\n    let type = pic[0].type.split('/') //[1] 에 확장자 들어있음\r\n    \r\n    const picRef = storage().ref().child(`xxxxx/picture/${MessageID}.${type[1]}`).put(pic[0]);\r\n    picRef.on(storage.TaskEvent.STATE_CHANGED,\r\n      function(snapshot) {\r\n          var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n          console.log('Upload is ' + MessageID, '.' + (type[1]) + progress + '% done');\r\n          switch (snapshot.state) {\r\n          case storage.TaskState.PAUSED:\r\n              console.log('Upload is paused');\r\n              break;\r\n          case storage.TaskState.RUNNING:\r\n              console.log('Upload is running');\r\n              break;\r\n          }\r\n      }, function(error) {\r\n          switch (error.code) {\r\n              case 'storage/unauthorized':\r\n              break;\r\n          \r\n              case 'storage/canceled':\r\n              break;\r\n\r\n              case 'storage/unknown':\r\n              break;\r\n      }\r\n      }, function() {\r\n          picRef.snapshot.ref.getDownloadURL().then(async function(downloadURL) {\r\n              //업로드 완료\r\n              const message = {\r\n                  _id : MessageID,\r\n                  createdAt : new Date().getTime(),\r\n                  user: {\r\n                      _id: user?.uid\r\n                  },\r\n                  image : downloadURL,  //다운로드URL 전달\r\n                  messageType : 'image'\r\n              };\r\n\r\n              await ChatDB.update({messages: [message, ...chatMessages]});\r\n          });\r\n      \r\n    })\r\n    handleCloseImage();\r\n  };\r\n\r\n  // 오디오 업로드 기능 관련 구현\r\n  \r\n  const audioReset = () => {\r\n    setAudioDetails({\r\n      url: null,\r\n      blob: null,\r\n      chunks: null,\r\n      duration: {\r\n        h: 0,\r\n        m: 0,\r\n        s: 0,\r\n      }\r\n    })\r\n  }\r\n\r\n  const audioStop = (data) => {\r\n    setAudioDetails(data);\r\n    console.log(audioDetails);\r\n  }\r\n\r\n  const audioUpload = async(file) => {   \r\n    const MessageID = messageIdGenerator();\r\n    const reference = storage().ref();\r\n    const voiceRef = reference.child(`xxxxx/voice/${MessageID}`);\r\n    \r\n    voiceRef.put(file)\r\n      .then(async(response) => {        \r\n        await storage().ref(`xxxxx/voice/${MessageID}`).getDownloadURL()\r\n          .then(result => {\r\n            const message = {\r\n              _id : MessageID,\r\n              createdAt : new Date().getTime(),\r\n              user: {\r\n                  _id: `${user?.uid}`,\r\n                  name: user?.displayName,\r\n                  avatar: user?.photoURL\r\n              },\r\n              audio : result,  //파일 경로만 전달\r\n              messageType : 'audio'\r\n            };\r\n            ChatDB.update({messages: [message, ...chatMessages]});\r\n            setAudioModalOpen(false);\r\n          })        \r\n    })   \r\n  }\r\n\r\n  const handleAudioModal = () => {\r\n    setAudioModalOpen(true)\r\n    handleMenuClose();\r\n  }\r\n\r\n  const handleCloseAudio = () => {\r\n    setAudioModalOpen(false)\r\n    audioReset();\r\n  }\r\n\r\n  const getUrl = async(props) => {\r\n    const url = await storage().ref(props.currentMessage.audio).getDownloadURL()\r\n    \r\n    console.log(url);\r\n    \r\n    return url;\r\n  }\r\n\r\n  const renderAudio = (props) => {\r\n    return (\r\n      <div className={classes.player}><audio src={props.currentMessage.audio} controls/></div>\r\n    )\r\n  }\r\n\r\n  // 오버플로우 메뉴 구현\r\n  const handleMenuClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleMenuClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const renderLoading = () => {\r\n    return (<div>Loading...</div>)\r\n  }\r\n\r\n  const onSend = async(messages = []) => {\r\n      messages[0].messageType = \"message\";\r\n      messages[0].createdAt = new Date().getTime();\r\n\r\n      await ChatDB.update({messages: [messages[0], ...chatMessages]});\r\n  }        \r\n\r\n  const renderBubble = (props) => {\r\n    return(\r\n        <Bubble \r\n            {...props}\r\n            wrapperStyle={{\r\n                left:{\r\n                    backgroundColor: '#F5F5F5',\r\n                    fontColor: 'black',\r\n                    fontWeight: 'bold'\r\n                },\r\n                right: {\r\n                    backgroundColor: '#FFC043',\r\n                    fontWeight: 'bold'\r\n                }\r\n            }}\r\n        />\r\n\r\n    );\r\n  }\r\n\r\n  const renderComposer = (props) => {\r\n    return(\r\n       <Composer\r\n            {...props}\r\n            textInputProps={{\r\n              ...props.textInputProps,\r\n              autoFocus: true,\r\n              blurOnSubmit: true,\r\n              onSubmitEditing: (() => { //Enter 키를 입력시 Send 할 수 있도록\r\n                      if (props.text && props.onSend) {\r\n                        props.onSend({text: props.text.trim()}, true);\r\n                      }\r\n              })              \r\n            }}\r\n            textInputStyle={{justifyContent: 'center'}}\r\n       />\r\n    );\r\n  }\r\n\r\n  const renderActions = (props) => {\r\n    return(\r\n      \r\n      <div>\r\n        <IconButton onClick={handleMenuClick}>\r\n          <FontAwesomeIcon icon={faBars} style={{color: '#FFC043'}} size={32}/>   \r\n        </IconButton>\r\n        <Menu\r\n            id=\"simple-menu\"\r\n            anchorEl={anchorEl}\r\n            keepMounted\r\n            open={Boolean(anchorEl)}\r\n            onClose={handleMenuClose}\r\n          >\r\n          <MenuItem onClick={clickImageSend}>이미지</MenuItem>\r\n          <MenuItem onClick={handleAudioModal}>음성</MenuItem>\r\n        </Menu>   \r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderSend = (props) => {\r\n    return(\r\n      <Send {...props} containerStyle={{justifyContent: 'center', \r\n            alignItems: 'center',\r\n            borderWidth: 0,\r\n            marginLeft: 15,\r\n            marginRight: 5,\r\n            marginBottom: 1,\r\n            width: 60}}>\r\n        <FontAwesomeIcon icon={faPaperPlane} style={{color: '#FFC043'}} size={60}/>\r\n      </Send>\r\n    );        \r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n        <Drawer\r\n            className={classes.drawer}\r\n            variant=\"permanent\"\r\n            classes={{\r\n                paper: classes.drawerPaper,\r\n            }}\r\n        >\r\n            <Toolbar/>\r\n            <div className={classes.drawerContainer}>\r\n            \r\n            <List \r\n              button            \r\n              selected\r\n            >\r\n              {chatRoom.map((key) => (\r\n                <ListItem key={key} button selected={selectedIndex === key} onClick={() => setSelectedIndex(key)}>                      \r\n                  <ListItemAvatar>\r\n                    <Avatar src='../../assets/profile.jpg'/>\r\n                  </ListItemAvatar>\r\n                  <ListItemText primary='장충단 길' secondary='고객명'/>\r\n                </ListItem>\r\n              ))}\r\n            </List>\r\n            </div>            \r\n        </Drawer>\r\n\r\n        <div className={classes.chat}>\r\n          <Toolbar/>\r\n          <GiftedChat\r\n            user={{\r\n              _id: `${user?.uid}`,\r\n              name: user.displayName\r\n            }}\r\n            infiniteScroll={true}\r\n            createdAt={new Date().getTime()}\r\n            textInputProps={{autoFocus: true}}\r\n            messages={chatMessages}\r\n            alwaysShowSend={true}\r\n            renderUsernameOnMessage={true}\r\n            onSend={messages => onSend(messages)}\r\n            renderActions={renderActions}\r\n            renderSend={renderSend}\r\n            renderLoading={renderLoading}\r\n            renderBubble={renderBubble}\r\n            renderMessageAudio={renderAudio}\r\n            renderComposer={renderComposer}\r\n            renderAvatar={null}\r\n          />\r\n\r\n        <Modal\r\n          open={modalOpen}\r\n          onClose={handleCloseImage}\r\n          aria-labelledby=\"Image Modal\"\r\n          aria-describedby=\"이미지 업로드를 위한 Modal 창\"\r\n        >\r\n          <div style={modalStyle} className={classes.paper}>\r\n            <ImageUploader\r\n              withIcon={true}\r\n              buttonText='이미지를 선택하세요'\r\n              onChange={onDrop}\r\n              singleImage={true}\r\n              imgExtension={['.jpg', '.gif', '.png', '.gif']}\r\n              maxFileSize={5242880}\r\n            />\r\n          </div>\r\n        </Modal>\r\n        <Modal\r\n          open={audioModalOpen}\r\n          onClose={handleCloseAudio}\r\n          aria-labelledby=\"Audio Modal\"\r\n          aria-describedby=\"오디오 메시지 전송을 위한 Modal\"\r\n        >\r\n          <div style={modalStyle} className={classes.paper}>\r\n            <Recorder\r\n              record={true}\r\n              title={\"녹음기\"}\r\n              audioURL={audioDetails.url}\r\n              showUIAudio\r\n              handleAudioStop={data => audioStop(data)}\r\n              handleAudioUpload={data => audioUpload(data)}\r\n              handleRest={() => audioReset()}\r\n            />\r\n          </div>\r\n        </Modal>\r\n        </div>        \r\n      </div>\r\n  );\r\n  \r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  drawer: {\r\n    position: 'relative',\r\n    width: 300,\r\n    flexShrink: 0,\r\n    zIndex: 0,\r\n  },\r\n  drawerPaper: {\r\n    width: 300,\r\n  },\r\n  drawerContainer: {\r\n    overflow: 'auto',\r\n  },\r\n  avatar: {\r\n    width: 52,\r\n    height: 52,\r\n    borderRadius: 100,\r\n  },\r\n  chat: {\r\n    position: 'fixed',\r\n    bottom: 0,\r\n    left: 300,\r\n    right: 0,\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    height: \"100vh\",\r\n    borderColor: 'gray'\r\n  },\r\n  paper: {\r\n    position: 'absolute',\r\n    width: 400,\r\n    backgroundColor: theme.palette.background.paper,\r\n    boxShadow: theme.shadows[5],\r\n  },\r\n  player: {\r\n    padding: 5\r\n  }\r\n\r\n}));\r\n\r\nexport default Chat;","C:\\Work\\GlokoolWeb\\src\\containers\\Auth\\index.js",[],"C:\\Work\\GlokoolWeb\\src\\components\\Auth\\index.js",[],"C:\\Work\\GlokoolWeb\\src\\containers\\Email\\index.js",[],"C:\\Work\\GlokoolWeb\\src\\components\\Chat\\index.js",[],"C:\\Work\\GlokoolWeb\\src\\containers\\Email\\EmailFail.js",["254"],"import React, { Component } from 'react';\r\nimport { AuthContent, AuthButton, AuthText } from '../../components/Auth';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { auth } from '../../Firebase';\r\nimport * as authActions from '../../redux/modules/Auth';\r\n\r\nconst user = auth().currentUser;\r\n\r\nclass EmailFail extends Component {\r\n    \r\n    componentDidMount() {\r\n    }\r\n\r\n    handleClick = () => {\r\n        this.props.history.push('/email/verification');\r\n    }\r\n\r\n    handleClick2 = () => {\r\n        auth().signOut();\r\n        this.props.history.push('/');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <AuthContent title=\"이메일 인증 실패\">\r\n                <AuthText context='이메일 인증이 완료되지 않았습니다'/>\r\n                <AuthText context='링크를 클릭해주세요'/>\r\n                <AuthButton onClick={this.handleClick}>이메일 재 전송</AuthButton>\r\n                <AuthButton onClick={this.handleClick2}>메인으로</AuthButton>\r\n            </AuthContent>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n    }),\r\n    (dispatch) => ({\r\n        AuthActions: bindActionCreators(authActions, dispatch)\r\n    })\r\n)(EmailFail);","C:\\Work\\GlokoolWeb\\src\\containers\\Email\\EmailVefication.js",[],"C:\\Work\\GlokoolWeb\\src\\components\\Auth\\AuthError.js",[],"C:\\Work\\GlokoolWeb\\src\\components\\Auth\\AuthText.js",[],"C:\\Work\\GlokoolWeb\\src\\components\\Chat\\ChatRoom.js",["255"],"import React from 'react';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport { Avatar, ListItemAvatar, Toolbar } from '@material-ui/core';\r\n\r\n\r\nconst drawerWidth = 300;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  drawer: {\r\n    position: 'relative',\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n    zIndex: 0,\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  drawerContainer: {\r\n    overflow: 'auto',\r\n  },\r\n  avatar: {\r\n    width: 52,\r\n    height: 52,\r\n    borderRadius: 100,\r\n  },\r\n}));\r\n\r\n\r\nconst chatRoom = [1,2,3,4,5];\r\n\r\nexport default function ChatRoomLeft () {\r\n    const classes = useStyles();\r\n    const [selectedIndex, setSelectedIndex] = React.useState(1);\r\n\r\n    return(\r\n      <div>\r\n        <Drawer\r\n            className={classes.drawer}\r\n            variant=\"permanent\"\r\n            classes={{\r\n                paper: classes.drawerPaper,\r\n            }}\r\n        >\r\n            <Toolbar/>\r\n            <div className={classes.drawerContainer}>\r\n            \r\n            <List \r\n              button            \r\n              selected\r\n            >\r\n              {chatRoom.map((key) => (\r\n                <ListItem key={key} button selected={selectedIndex === key} onClick={() => setSelectedIndex(key)}>                      \r\n                  <ListItemAvatar>\r\n                    <Avatar src='../../assets/profile.jpg'/>\r\n                  </ListItemAvatar>\r\n                  <ListItemText primary='장충단 길' secondary='고객명'/>\r\n                </ListItem>\r\n              ))}\r\n            </List>\r\n            </div>            \r\n        </Drawer>\r\n      </div>\r\n        \r\n        \r\n        \r\n    );    \r\n};","C:\\Work\\GlokoolWeb\\src\\components\\Auth\\AuthGender.js",["256"],"import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nconst Wrapper = styled.div`\r\n    margin-top: 1rem;    \r\n`;\r\n\r\nconst Label = styled.div`\r\n    font-size: 1rem;\r\n    color: #5F5F5F;\r\n    margin-bottom: 0.25rem;\r\n`;\r\n\r\nconst Input = styled.input`\r\n    width: 100%;\r\n    box-sizing : border-box;\r\n    border: 1px solid #707070;\r\n    outline: none;\r\n    border-radius: 0px;\r\n    line-height: 2.5rem;\r\n    font-size: 1.2rem;\r\n    padding-left: 0.5rem;\r\n    padding-right: 0.5rem;\r\n`;\r\n\r\n\r\nconst AuthGender = ({label, ...rest}) => (\r\n    \r\n    <Wrapper>\r\n        <Label>{label}</Label>\r\n        <Select {...rest} style={{fontSize: '1.2rem'}}>\r\n          <MenuItem value={'Male'}>Male</MenuItem>\r\n          <MenuItem value={'Female'}>Female</MenuItem>\r\n        </Select>\r\n    </Wrapper>\r\n\r\n    \r\n);\r\n\r\nexport default AuthGender;\r\n\r\n","C:\\Work\\GlokoolWeb\\src\\components\\Auth\\AuthDate.js",["257","258"],"import React from 'react';\r\nimport '../Date/react-datetime.css';\r\nimport Datetime from \"react-datetime\";\r\nimport styled from 'styled-components';\r\nimport moment from 'moment';\r\n\r\nconst Wrapper = styled.div`\r\n    margin-top: 1rem;    \r\n`;\r\n\r\nconst Label = styled.div`\r\n    font-size: 1rem;\r\n    color: #5F5F5F;\r\n    margin-bottom: 0.25rem;\r\n`;\r\n\r\nconst renderInput = ((props) => {\r\n    function clear() {\r\n      props.onChange({ target: { name: 'birthDate', value: '' } });\r\n    }\r\n    return (\r\n      <div>\r\n        <input {...props} style={{\r\n            width: '50%',\r\n            fontSize: '1.2rem',\r\n            boxSizing: 'border-box',\r\n            paddingTop: '0.5rem',\r\n            paddingBottom: '0.5rem',\r\n            paddingLeft: '0.5rem',\r\n            paddingRight: '0.5rem',\r\n            border: '1px solid #707070',\r\n            outline: 'none',\r\n            borderRadius: '0px',\r\n        }}/>\r\n      </div>\r\n    );\r\n});\r\n\r\nconst Authdate = ({label, ...rest}) => (    \r\n    <Wrapper>\r\n        <Label>{label}</Label>\r\n        <Datetime {...rest} renderInput={renderInput}/>\r\n    </Wrapper>    \r\n);\r\n\r\nexport default Authdate;\r\n\r\n\r\n","C:\\Work\\GlokoolWeb\\src\\components\\Base\\Header\\index.js",[],"C:\\Work\\GlokoolWeb\\src\\components\\Auth\\AuthButton.js",[],"C:\\Work\\GlokoolWeb\\src\\components\\Setting\\index.js",[],"C:\\Work\\GlokoolWeb\\src\\components\\Auth\\AuthContent.js",[],"C:\\Work\\GlokoolWeb\\src\\components\\Auth\\InputWithLabel.js",[],"C:\\Work\\GlokoolWeb\\src\\containers\\Auth\\Email.js",[],"C:\\Work\\GlokoolWeb\\src\\containers\\Auth\\Login.js",["259","260","261","262","263","264","265"],"import React, { Component } from 'react';\r\nimport { AuthContent, InputWithLabel, AuthButton, AuthError } from '../../components/Auth';\r\nimport { auth } from '../../Firebase';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport * as authActions from '../../redux/modules/Auth';\r\n\r\n\r\nclass Login extends Component {\r\n\r\n    componentDidMount() {\r\n        if(auth().currentUser != null){\r\n            console.log(auth().currentUser);\r\n            this.props.history.push('/main');\r\n        }\r\n    }\r\n\r\n    setError = (message) => {\r\n        const { AuthActions } = this.props;\r\n        AuthActions.setError({\r\n            form: 'login',\r\n            message\r\n        });\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        const { AuthActions } = this.props;\r\n        const { name, value } = e.target;\r\n\r\n        AuthActions.changeInput({\r\n            name,\r\n            value,\r\n            form: 'login'\r\n        });\r\n    }\r\n\r\n    handleLogin = () => {\r\n        const { form, error } = this.props;\r\n        const { email, password } = form.toJS();\r\n        \r\n        auth().setPersistence(auth.Auth.Persistence.LOCAL);\r\n\r\n        auth().signInWithEmailAndPassword(email, password)\r\n            .then((result) => {\r\n                console.log(result.user)\r\n                if(result.user.emailVerified == true){\r\n                    //this.props.history.push('/main');\r\n                }\r\n                else{\r\n                    //this.props.history.push('/email/fail');\r\n                }\r\n               \r\n            })\r\n            .catch((error) => {\r\n                var errorCode = error.code;\r\n                var errorMessage = error.message;\r\n\r\n                console.log(errorCode);\r\n                \r\n                if(errorCode == 'auth/invalid-email'){\r\n                    this.setError('올바르지 않은 이메일 형식입니다');\r\n                }\r\n                else if (errorCode == 'auth/user-disabled'){\r\n                    this.setError('정지된 회원입니다');\r\n                }\r\n                else if (errorCode == 'auth/user-not-found'){\r\n                    this.setError('없는 회원입니다. 이메일을 확인해주세요');\r\n                }\r\n                else if (errorCode == 'auth/wrong-password'){\r\n                    this.setError('비밀번호가 틀렸습니다');\r\n                }\r\n                else{\r\n                    this.setError(errorCode);\r\n                }\r\n            })\r\n    }\r\n\r\n    render() {\r\n        const { error } = this.props;\r\n        const { email, password } = this.props.form.toJS(); // form 에서 email 과 password 값을 읽어옴\r\n        const { handleChange, handleLogin } = this;\r\n\r\n        return (\r\n            <AuthContent title=\"로그인\">\r\n                <InputWithLabel \r\n                    label=\"이메일\" \r\n                    name=\"email\" \r\n                    placeholder=\"이메일\" \r\n                    value={email} \r\n                    onChange={handleChange}\r\n                />\r\n                <InputWithLabel \r\n                    label=\"비밀번호\" \r\n                    name=\"password\" \r\n                    placeholder=\"비밀번호\" \r\n                    type=\"password\" \r\n                    value={password} \r\n                    onChange={handleChange}\r\n                />\r\n                {\r\n                    error && <AuthError>{error}</AuthError>\r\n                }\r\n                <AuthButton onClick={() => handleLogin()}>로그인</AuthButton>\r\n            </AuthContent>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        form: state.auth.getIn(['login', 'form']),\r\n        error: state.auth.getIn(['login', 'error']),\r\n    }),\r\n    (dispatch) => ({\r\n        AuthActions: bindActionCreators(authActions, dispatch)\r\n    })\r\n)(Login);","C:\\Work\\GlokoolWeb\\src\\components\\Auth\\AuthWrapper.js",[],"C:\\Work\\GlokoolWeb\\src\\containers\\Auth\\Register.js",["266","267","268","269","270","271","272","273","274"],"import React, { Component } from \"react\";\r\nimport {\r\n  AuthContent,\r\n  InputWithLabel,\r\n  AuthButton,\r\n  AuthDate,\r\n  AuthGender,\r\n  AuthError,\r\n} from \"../../components/Auth\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { auth, firestore } from \"../../Firebase\";\r\nimport * as authActions from \"../../redux/modules/Auth\";\r\nimport moment from \"moment\";\r\nimport { isEmail, isLength, isAlphanumeric, toDate } from \"validator\";\r\n\r\nconst profileDocUpdate = async (user, name, email, gender, birthDate) => {\r\n  var userDocument = await firestore()\r\n    .collection(\"Guides\")\r\n    .doc(user?.uid)\r\n    .set({\r\n      name: name,\r\n      email: email,\r\n      gender: gender,\r\n      signupDate: new Date(), //가입한 날짜\r\n      birthDate: birthDate,\r\n    })\r\n    .then(() => {\r\n      console.log(\"프로필 문서 업데이트 성공\");\r\n    })\r\n    .catch(() => {\r\n      console.log(\"프로필 문서 업데이트 성공\");\r\n    });\r\n};\r\n\r\nconst profileUpdate = async (user, name) => {\r\n  var profile = await user\r\n    .updateProfile({\r\n      displayName: name,\r\n      photoURL: \"\",\r\n    })\r\n    .then(() => {\r\n      console.log(\"프로필 업데이트 성공\");\r\n    })\r\n    .catch(() => {\r\n      console.log(\"프로필 업데이트 실패\");\r\n    });\r\n};\r\n\r\nclass Register extends Component {\r\n  componentDidMount() {\r\n    if (auth().currentUser != null) {\r\n      console.log(auth().currentUser);\r\n      this.props.history.push(\"/main\");\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    //화면을 이동할때 실행\r\n    //입력값 초기화 실행\r\n\r\n    this.handleChange({ target: { name: \"email\", value: \"\" } });\r\n    this.handleChange({ target: { name: \"password\", value: \"\" } });\r\n    this.handleChange({ target: { name: \"passwordConfirm\", value: \"\" } });\r\n    this.handleChange({ target: { name: \"birthDate\", value: \"\" } });\r\n    this.handleChange({ target: { name: \"gender\", value: \"Male\" } });\r\n  }\r\n\r\n  setError = (message) => {\r\n    const { AuthActions } = this.props;\r\n    AuthActions.setError({\r\n      form: \"register\",\r\n      message,\r\n    });\r\n  };\r\n\r\n  validate = {\r\n    email: (value) => {\r\n      if (!isEmail(value)) {\r\n        this.setError(\"잘못된 이메일 형식 입니다.\");\r\n        return false;\r\n      }\r\n      this.setError(null);\r\n      return true;\r\n    },\r\n    username: (value) => {\r\n      if (!isAlphanumeric(value) || !isLength(value, { min: 4, max: 15 })) {\r\n        this.setError(\r\n          \"닉네임은 4~15 글자의 알파벳 혹은 숫자로 이뤄져야 합니다.\"\r\n        );\r\n        return false;\r\n      }\r\n      this.setError(null);\r\n      return true;\r\n    },\r\n    password: (value) => {\r\n      if (!isLength(value, { min: 8 })) {\r\n        this.setError(\"비밀번호를 8자 이상 입력하세요.\");\r\n        return false;\r\n      }\r\n      this.setError(null);\r\n      return true;\r\n    },\r\n    passwordConfirm: (value) => {\r\n      if (this.props.form.get(\"password\") !== value) {\r\n        this.setError(\"입력한 비밀번호와 일치하지 않습니다.\");\r\n        return false;\r\n      }\r\n      this.setError(null);\r\n      return true;\r\n    },\r\n    birthDate: (value) => {\r\n      return true;\r\n    },\r\n    gender: (value) => {\r\n      return true;\r\n    },\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    const { AuthActions } = this.props;\r\n    const { name, value } = e.target;\r\n\r\n    AuthActions.changeInput({\r\n      name,\r\n      value,\r\n      form: \"register\",\r\n    });\r\n\r\n    const validation = this.validate[name](value);\r\n  };\r\n\r\n  handleLocalRegister = async () => {\r\n    const { form, AuthActions, error, history } = this.props;\r\n    const {\r\n      email,\r\n      username,\r\n      password,\r\n      passwordConfirm,\r\n      birthDate,\r\n      gender,\r\n    } = form.toJS();\r\n\r\n    const { validate } = this;\r\n\r\n    if (error) return;\r\n    if (\r\n      !validate[\"email\"](email) ||\r\n      !validate[\"username\"](username) ||\r\n      !validate[\"password\"](password) ||\r\n      !validate[\"passwordConfirm\"](passwordConfirm) ||\r\n      !validate[\"birthDate\"](birthDate)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    this.setError(null);\r\n\r\n    await auth()\r\n      .createUserWithEmailAndPassword(email, password)\r\n      .then(async (response) => {\r\n        await profileDocUpdate(\r\n          response.user,\r\n          username,\r\n          email,\r\n          gender,\r\n          birthDate\r\n        );\r\n        await profileUpdate(response.user, username);\r\n        this.props.history.push(\"/auth/email\");\r\n      })\r\n      .catch((error) => {\r\n        var errorCode = error.code;\r\n\r\n        if (errorCode == \"auth/email-already-in-use\") {\r\n          this.setError(\"이미 사용중인 이메일입니다.\");\r\n        } else if (errorCode == \"auth/weak-password\") {\r\n          this.setError(\"비밀번호가 너무 약합니다\");\r\n        } else {\r\n          this.setError(errorCode);\r\n        }\r\n      });\r\n  };\r\n\r\n  render() {\r\n    const { error } = this.props;\r\n    const {\r\n      email,\r\n      username,\r\n      password,\r\n      passwordConfirm,\r\n      birthDate,\r\n      gender,\r\n    } = this.props.form.toJS();\r\n    const { handleChange, handleLocalRegister } = this;\r\n\r\n    return (\r\n      <AuthContent title=\"회원가입\">\r\n        <InputWithLabel\r\n          label=\"이메일\"\r\n          name=\"email\"\r\n          placeholder=\"이메일\"\r\n          value={email}\r\n          onChange={handleChange}\r\n        />\r\n        <InputWithLabel\r\n          label=\"닉네임\"\r\n          name=\"username\"\r\n          placeholder=\"가이드 명으로 표시됩니다\"\r\n          value={username}\r\n          onChange={handleChange}\r\n        />\r\n        <InputWithLabel\r\n          label=\"비밀번호\"\r\n          name=\"password\"\r\n          placeholder=\"비밀번호\"\r\n          type=\"password\"\r\n          value={password}\r\n          onChange={handleChange}\r\n        />\r\n        <InputWithLabel\r\n          label=\"비밀번호 확인\"\r\n          name=\"passwordConfirm\"\r\n          placeholder=\"비밀번호 확인\"\r\n          type=\"password\"\r\n          value={passwordConfirm}\r\n          onChange={handleChange}\r\n        />\r\n        <AuthDate\r\n          label=\"생년월일\"\r\n          value={birthDate}\r\n          dateFormat=\"YYYY-MM-DD\"\r\n          timeFormat={false}\r\n          closeOnSelect={true}\r\n          onChange={(date) =>\r\n            handleChange({\r\n              target: { name: \"birthDate\", value: moment(date).format(\"X\") },\r\n            })\r\n          }\r\n        />\r\n        <AuthGender\r\n          label=\"성별\"\r\n          value={\"Male\"}\r\n          onChange={(gender) =>\r\n            handleChange({\r\n              target: { name: \"gender\", value: gender.target.value },\r\n            })\r\n          }\r\n        />\r\n        {error && <AuthError>{error}</AuthError>}\r\n        <AuthButton onClick={handleLocalRegister}>회원가입</AuthButton>\r\n      </AuthContent>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    form: state.auth.getIn([\"register\", \"form\"]),\r\n    error: state.auth.getIn([\"register\", \"error\"]),\r\n    exists: state.auth.getIn([\"register\", \"exists\"]),\r\n  }),\r\n  (dispatch) => ({\r\n    AuthActions: bindActionCreators(authActions, dispatch),\r\n  })\r\n)(Register);\r\n","C:\\Work\\GlokoolWeb\\src\\lib\\styleUtil.js",[],"C:\\Work\\GlokoolWeb\\src\\components\\Base\\Header\\SettingButton.js",["275"],"import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport { shadow } from '../../../lib/styleUtil';\r\nimport { auth } from '../../../Firebase'\r\n\r\nconst BorderedButton = styled(Link)`\r\n    font-weight: 600;\r\n    color: #FFC043;\r\n    border: 1px solid #FFC043;\r\n    padding: 0.5rem;\r\n    padding-bottom: 0.4rem;\r\n    cursor: pointer;\r\n    border-radius: 2px;\r\n    text-decoration: none;\r\n    transition: .2s all;\r\n    \r\n\r\n    &:hover {\r\n        background: #FFC043;\r\n        color: white;\r\n        ${shadow(1)}\r\n    }\r\n\r\n    &:active {\r\n        /* 마우스 클릭시 아래로 미세하게 움직임 */\r\n        transform: translateY(3px);\r\n    }\r\n\r\n\r\n`;\r\n\r\nconst SettingButton = () => (\r\n    \r\n    <BorderedButton to=\"/main/setting\">\r\n        개인정보 수정\r\n    </BorderedButton>\r\n);\r\n\r\nexport default SettingButton;","C:\\Work\\GlokoolWeb\\src\\components\\Base\\Header\\SignUpButton.js",[],"C:\\Work\\GlokoolWeb\\src\\components\\Base\\Header\\LogoutButton.js",[],"C:\\Work\\GlokoolWeb\\src\\components\\Setting\\SettingText.js",[],"C:\\Work\\GlokoolWeb\\src\\components\\Setting\\SettingButton.js",[],"C:\\Work\\GlokoolWeb\\src\\components\\Setting\\SettingGender.js",["276"],"import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nconst Wrapper = styled.div`\r\n    margin-top: 1rem;    \r\n`;\r\n\r\nconst Label = styled.div`\r\n    font-size: 1rem;\r\n    color: #5F5F5F;\r\n    margin-bottom: 0.25rem;\r\n`;\r\n\r\nconst Input = styled.input`\r\n    width: 100%;\r\n    box-sizing : border-box;\r\n    border: 1px solid #707070;\r\n    outline: none;\r\n    border-radius: 0px;\r\n    line-height: 2.5rem;\r\n    font-size: 1.2rem;\r\n    padding-left: 0.5rem;\r\n    padding-right: 0.5rem;\r\n`;\r\n\r\n\r\nconst SettingGender = ({label, ...rest}) => (\r\n    \r\n    <Wrapper>\r\n        <Label>{label}</Label>\r\n        <Select {...rest} style={{fontSize: '1.2rem'}}>\r\n          <MenuItem value={'Male'}>Male</MenuItem>\r\n          <MenuItem value={'Female'}>Female</MenuItem>\r\n        </Select>\r\n    </Wrapper>\r\n\r\n    \r\n);\r\n\r\nexport default SettingGender;\r\n\r\n","C:\\Work\\GlokoolWeb\\src\\components\\Setting\\SettingDate.js",["277","278"],"import React from 'react';\r\nimport '../Date/react-datetime.css';\r\nimport Datetime from \"react-datetime\";\r\nimport styled from 'styled-components';\r\nimport moment from 'moment';\r\n\r\nconst Wrapper = styled.div`\r\n    margin-top: 1rem;    \r\n`;\r\n\r\nconst Label = styled.div`\r\n    font-size: 1rem;\r\n    color: #5F5F5F;\r\n    margin-bottom: 0.25rem;\r\n`;\r\n\r\nconst renderInput = ((props) => {\r\n    function clear() {\r\n      props.onChange({ target: { name: 'birthDate', value: '' } });\r\n    }\r\n    return (\r\n      <div>\r\n        <input {...props} style={{\r\n            width: '50%',\r\n            fontSize: '1.2rem',\r\n            boxSizing: 'border-box',\r\n            paddingTop: '0.5rem',\r\n            paddingBottom: '0.5rem',\r\n            paddingLeft: '0.5rem',\r\n            paddingRight: '0.5rem',\r\n            border: '1px solid #707070',\r\n            outline: 'none',\r\n            borderRadius: '0px',\r\n        }}/>\r\n      </div>\r\n    );\r\n});\r\n\r\nconst Settingdate = ({label, ...rest}) => (    \r\n    <Wrapper>\r\n        <Label>{label}</Label>\r\n        <Datetime {...rest} renderInput={renderInput}/>\r\n    </Wrapper>    \r\n);\r\n\r\nexport default Settingdate;\r\n\r\n\r\n","C:\\Work\\GlokoolWeb\\src\\components\\Setting\\SettingError.js",[],"C:\\Work\\GlokoolWeb\\src\\components\\Setting\\InputWithLabel.js",[],"C:\\Work\\GlokoolWeb\\src\\components\\Setting\\SettingContent.js",[],"C:\\Work\\GlokoolWeb\\src\\components\\Setting\\SettingWrapper.js",[],"C:\\Work\\GlokoolWeb\\src\\components\\Base\\Header\\LoginButton.js",[],"C:\\Work\\GlokoolWeb\\src\\components\\Base\\Header\\Header.js",["279"],"import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { shadow, media } from '../../../lib/styleUtil';\r\n\r\n\r\n\r\n// 상단 고정, 그림자\r\nconst Positioner = styled.div`\r\n    flex-direction: column;\r\n    position: fixed;\r\n    width: 100%;\r\n    z-index: 1000;\r\n`;\r\n\r\n// 흰 배경, 내용 중간 정렬\r\nconst WhiteBackground = styled.div`\r\n    background: white;\r\n    display: flex;\r\n    justify-content: center;\r\n    height: auto;\r\n`;\r\n\r\n// 해더의 내용\r\nconst HeaderContents = styled.div`\r\n    width: 1200px;\r\n    height: 65px;\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n\r\n    padding-right: 1rem;\r\n    padding-left: 1rem;\r\n    ${media.wide`\r\n        width: 992px;\r\n    `}\r\n\r\n    ${media.tablet`\r\n        width: 100%;\r\n    `}\r\n`;\r\n\r\n// 로고\r\nconst Logo = styled.div`\r\n    font-size: x-large;\r\n    color: #FFC043;\r\n    background-size: cover;\r\n    background-position: center;\r\n    background-repeat: no-repeat;\r\n`;\r\n\r\n// 중간 여백\r\nconst Spacer = styled.div`\r\n    flex-grow: 1;\r\n`;\r\n\r\n// 하단 그래디언트 테두리\r\nconst GradientBorder = styled.div`\r\n    height: 3px;\r\n    background: #707070;\r\n`;\r\n\r\nconst Header = ({children}) => {\r\n    return (\r\n        <Positioner>\r\n            <WhiteBackground>\r\n                <HeaderContents>\r\n                    <Logo>GLOKOOL</Logo>\r\n                    <Spacer/>\r\n                    {children}\r\n                </HeaderContents>\r\n            </WhiteBackground>\r\n            <GradientBorder/>\r\n        </Positioner>\r\n    );\r\n};\r\n\r\nexport default Header;","C:\\Work\\GlokoolWeb\\src\\pages\\Home.js",["280"],"C:\\Work\\GlokoolWeb\\src\\components\\Base\\HeaderContainer.js",[],{"ruleId":"281","replacedBy":"282"},{"ruleId":"283","replacedBy":"284"},{"ruleId":"285","severity":1,"message":"286","line":3,"column":10,"nodeType":"287","messageId":"288","endLine":3,"endColumn":14},{"ruleId":"285","severity":1,"message":"289","line":3,"column":16,"nodeType":"287","messageId":"288","endLine":3,"endColumn":25},{"ruleId":"285","severity":1,"message":"290","line":9,"column":10,"nodeType":"287","messageId":"288","endLine":9,"endColumn":21},{"ruleId":"285","severity":1,"message":"291","line":10,"column":10,"nodeType":"287","messageId":"288","endLine":10,"endColumn":22},{"ruleId":"285","severity":1,"message":"292","line":1,"column":17,"nodeType":"287","messageId":"288","endLine":1,"endColumn":26},{"ruleId":"285","severity":1,"message":"293","line":1,"column":28,"nodeType":"287","messageId":"288","endLine":1,"endColumn":36},{"ruleId":"285","severity":1,"message":"294","line":4,"column":8,"nodeType":"287","messageId":"288","endLine":4,"endColumn":14},{"ruleId":"285","severity":1,"message":"295","line":9,"column":3,"nodeType":"287","messageId":"288","endLine":9,"endColumn":14},{"ruleId":"285","severity":1,"message":"296","line":11,"column":3,"nodeType":"287","messageId":"288","endLine":11,"endColumn":15},{"ruleId":"297","severity":1,"message":"298","line":45,"column":22,"nodeType":"299","messageId":"300","endLine":45,"endColumn":24},{"ruleId":"301","severity":1,"message":"302","line":53,"column":5,"nodeType":"303","endLine":53,"endColumn":7,"suggestions":"304"},{"ruleId":"285","severity":1,"message":"305","line":71,"column":17,"nodeType":"287","messageId":"288","endLine":71,"endColumn":25},{"ruleId":"306","severity":1,"message":"307","line":73,"column":13,"nodeType":"308","messageId":"309","endLine":80,"endColumn":14},{"ruleId":"306","severity":1,"message":"307","line":82,"column":13,"nodeType":"308","messageId":"309","endLine":91,"endColumn":10},{"ruleId":"310","severity":1,"message":"311","line":114,"column":51,"nodeType":"312","endLine":114,"endColumn":118},{"ruleId":"285","severity":1,"message":"313","line":1,"column":17,"nodeType":"287","messageId":"288","endLine":1,"endColumn":28},{"ruleId":"285","severity":1,"message":"314","line":1,"column":30,"nodeType":"287","messageId":"288","endLine":1,"endColumn":36},{"ruleId":"285","severity":1,"message":"315","line":2,"column":22,"nodeType":"287","messageId":"288","endLine":2,"endColumn":30},{"ruleId":"297","severity":1,"message":"298","line":70,"column":19,"nodeType":"299","messageId":"300","endLine":70,"endColumn":21},{"ruleId":"297","severity":1,"message":"298","line":79,"column":27,"nodeType":"299","messageId":"300","endLine":79,"endColumn":29},{"ruleId":"301","severity":1,"message":"316","line":109,"column":6,"nodeType":"303","endLine":109,"endColumn":8,"suggestions":"317"},{"ruleId":"306","severity":1,"message":"307","line":132,"column":11,"nodeType":"308","messageId":"309","endLine":139,"endColumn":12},{"ruleId":"306","severity":1,"message":"307","line":141,"column":11,"nodeType":"308","messageId":"309","endLine":150,"endColumn":8},{"ruleId":"285","severity":1,"message":"318","line":227,"column":9,"nodeType":"287","messageId":"288","endLine":227,"endColumn":15},{"ruleId":"285","severity":1,"message":"319","line":8,"column":7,"nodeType":"287","messageId":"288","endLine":8,"endColumn":11},{"ruleId":"285","severity":1,"message":"315","line":2,"column":22,"nodeType":"287","messageId":"288","endLine":2,"endColumn":30},{"ruleId":"285","severity":1,"message":"320","line":16,"column":7,"nodeType":"287","messageId":"288","endLine":16,"endColumn":12},{"ruleId":"285","severity":1,"message":"321","line":5,"column":8,"nodeType":"287","messageId":"288","endLine":5,"endColumn":14},{"ruleId":"285","severity":1,"message":"322","line":18,"column":14,"nodeType":"287","messageId":"288","endLine":18,"endColumn":19},{"ruleId":"285","severity":1,"message":"323","line":38,"column":23,"nodeType":"287","messageId":"288","endLine":38,"endColumn":28},{"ruleId":"297","severity":1,"message":"298","line":46,"column":46,"nodeType":"299","messageId":"300","endLine":46,"endColumn":48},{"ruleId":"285","severity":1,"message":"324","line":56,"column":21,"nodeType":"287","messageId":"288","endLine":56,"endColumn":33},{"ruleId":"297","severity":1,"message":"298","line":60,"column":30,"nodeType":"299","messageId":"300","endLine":60,"endColumn":32},{"ruleId":"297","severity":1,"message":"298","line":63,"column":36,"nodeType":"299","messageId":"300","endLine":63,"endColumn":38},{"ruleId":"297","severity":1,"message":"298","line":66,"column":36,"nodeType":"299","messageId":"300","endLine":66,"endColumn":38},{"ruleId":"297","severity":1,"message":"298","line":69,"column":36,"nodeType":"299","messageId":"300","endLine":69,"endColumn":38},{"ruleId":"285","severity":1,"message":"325","line":15,"column":45,"nodeType":"287","messageId":"288","endLine":15,"endColumn":51},{"ruleId":"285","severity":1,"message":"326","line":18,"column":7,"nodeType":"287","messageId":"288","endLine":18,"endColumn":19},{"ruleId":"285","severity":1,"message":"327","line":37,"column":7,"nodeType":"287","messageId":"288","endLine":37,"endColumn":14},{"ruleId":"285","severity":1,"message":"328","line":130,"column":11,"nodeType":"287","messageId":"288","endLine":130,"endColumn":21},{"ruleId":"285","severity":1,"message":"329","line":134,"column":19,"nodeType":"287","messageId":"288","endLine":134,"endColumn":30},{"ruleId":"285","severity":1,"message":"330","line":134,"column":39,"nodeType":"287","messageId":"288","endLine":134,"endColumn":46},{"ruleId":"297","severity":1,"message":"298","line":175,"column":23,"nodeType":"299","messageId":"300","endLine":175,"endColumn":25},{"ruleId":"297","severity":1,"message":"298","line":177,"column":30,"nodeType":"299","messageId":"300","endLine":177,"endColumn":32},{"ruleId":"285","severity":1,"message":"331","line":193,"column":7,"nodeType":"287","messageId":"288","endLine":193,"endColumn":13},{"ruleId":"285","severity":1,"message":"286","line":5,"column":10,"nodeType":"287","messageId":"288","endLine":5,"endColumn":14},{"ruleId":"285","severity":1,"message":"320","line":16,"column":7,"nodeType":"287","messageId":"288","endLine":16,"endColumn":12},{"ruleId":"285","severity":1,"message":"321","line":5,"column":8,"nodeType":"287","messageId":"288","endLine":5,"endColumn":14},{"ruleId":"285","severity":1,"message":"322","line":18,"column":14,"nodeType":"287","messageId":"288","endLine":18,"endColumn":19},{"ruleId":"285","severity":1,"message":"332","line":3,"column":10,"nodeType":"287","messageId":"288","endLine":3,"endColumn":16},{"ruleId":"285","severity":1,"message":"333","line":3,"column":10,"nodeType":"287","messageId":"288","endLine":3,"endColumn":15},"no-native-reassign",["334"],"no-negated-in-lhs",["335"],"no-unused-vars","'auth' is defined but never used.","Identifier","unusedVar","'firestore' is defined but never used.","'AuthWrapper' is defined but never used.","'ChatRoomLeft' is defined but never used.","'Component' is defined but never used.","'useState' is defined but never used.","'Button' is defined but never used.","'SettingDate' is defined but never used.","'SettingError' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'user.photoURL'. Either include it or remove the dependency array.","ArrayExpression",["336"],"'progress' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useCallback' is defined but never used.","'useRef' is defined but never used.","'useTheme' is defined but never used.","React Hook React.useEffect has missing dependencies: 'ChatDB', 'history', and 'user.emailVerified'. Either include them or remove the dependency array.",["337"],"'getUrl' is assigned a value but never used.","'user' is assigned a value but never used.","'Input' is assigned a value but never used.","'moment' is defined but never used.","'clear' is defined but never used.","'error' is assigned a value but never used.","'errorMessage' is assigned a value but never used.","'toDate' is defined but never used.","'userDocument' is assigned a value but never used.","'profile' is assigned a value but never used.","'validation' is assigned a value but never used.","'AuthActions' is assigned a value but never used.","'history' is assigned a value but never used.","'gender' is assigned a value but never used.","'shadow' is defined but never used.","'Route' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"338","fix":"339"},{"desc":"340","fix":"341"},"Update the dependencies array to be: [user.photoURL]",{"range":"342","text":"343"},"Update the dependencies array to be: [ChatDB, history, user.emailVerified]",{"range":"344","text":"345"},[1320,1322],"[user.photoURL]",[3574,3576],"[ChatDB, history, user.emailVerified]"]